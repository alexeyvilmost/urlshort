{
  "Issues": [
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (io.Writer).Write(p []byte) (n int, err error)",
      "Severity": "error",
      "SourceLines": [
        "\treturn w.Writer.Write(b)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/compressing/compressing.go",
        "Offset": 205,
        "Line": 16,
        "Column": 9
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `io.WriteString` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\t\t\tio.WriteString(w, err.Error())"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/compressing/compressing.go",
        "Offset": 498,
        "Line": 26,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `gz.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\t\tdefer gz.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/compressing/compressing.go",
        "Offset": 563,
        "Line": 30,
        "Column": 18
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `io.WriteString` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\t\tio.WriteString(w, err.Error())"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/compressing/compressing.go",
        "Offset": 797,
        "Line": 42,
        "Column": 18
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `gz.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\tdefer gz.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/compressing/compressing.go",
        "Offset": 844,
        "Line": 45,
        "Column": 17
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 64 pointer bytes could be 56",
      "Severity": "error",
      "SourceLines": [
        "type Config struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/config/config.go",
        "Offset": 80,
        "Line": 10,
        "Column": 13
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "stylecheck",
      "Text": "ST1003: type UrlData should be URLData",
      "Severity": "error",
      "SourceLines": [
        "type UrlData struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 406,
        "Line": 25,
        "Column": 6
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "stylecheck",
      "Text": "ST1003: type UrlResponse should be URLResponse",
      "Severity": "error",
      "SourceLines": [
        "type UrlResponse struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 521,
        "Line": 30,
        "Column": 6
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 24 pointer bytes could be 16",
      "Severity": "error",
      "SourceLines": [
        "type Handlers struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 646,
        "Line": 35,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "gocritic",
      "Text": "captLocal: `URL' should not be capitalized",
      "Severity": "error",
      "SourceLines": [
        "func (h Handlers) Shorten(URL string) (string, error) {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 1016,
        "Line": 52,
        "Column": 27
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*github.com/alexeyvilmost/urlshort.git/internalstorage.Storage).Add(shortURL string, fullURL string) (string, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn h.BaseURL + str, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 1345,
        "Line": 60,
        "Column": 27
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "goconst",
      "Text": "string `application/json` has 4 occurrences, make it a constant",
      "Severity": "error",
      "SourceLines": [
        "\t\tres.Header().Add(\"Content-Type\", \"application/json\")"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 1979,
        "Line": 79,
        "Column": 36
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `(*encoding/json.Encoder).Encode` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\tjson.NewEncoder(res).Encode(result)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 2099,
        "Line": 82,
        "Column": 30
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `(*encoding/json.Encoder).Encode` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\tjson.NewEncoder(res).Encode(result)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 2349,
        "Line": 92,
        "Column": 29
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "prealloc",
      "Text": "Consider pre-allocating `urlResponseList`",
      "Severity": "error",
      "SourceLines": [
        "\tvar urlResponseList []UrlResponse"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 2504,
        "Line": 98,
        "Column": 2
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `(*encoding/json.Encoder).Encode` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\tjson.NewEncoder(res).Encode(urlResponseList)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 3177,
        "Line": 115,
        "Column": 29
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `io.WriteString` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\tio.WriteString(res, str)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 3667,
        "Line": 128,
        "Column": 17
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `io.WriteString` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\tio.WriteString(res, str)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/handlers/handlers.go",
        "Offset": 3821,
        "Line": 136,
        "Column": 16
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (net/http.ResponseWriter).Write([]byte) (int, error)",
      "Severity": "error",
      "SourceLines": [
        "\treturn size, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/logging/logging.go",
        "Offset": 374,
        "Line": 25,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func net/http.ListenAndServe(addr string, handler net/http.Handler) error",
      "Severity": "error",
      "SourceLines": [
        "\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/server/server.go",
        "Offset": 917,
        "Line": 31,
        "Column": 9
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "gocritic",
      "Text": "ifElseChain: rewrite if-else to switch statement",
      "Severity": "error",
      "SourceLines": [
        "\tif len(config.DBString) != 0 {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 824,
        "Line": 37,
        "Column": 2
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "goconst",
      "Text": "string `pgx` has 4 occurrences, make it a constant",
      "Severity": "error",
      "SourceLines": [
        "\t\tdb, err := sql.Open(\"pgx\", config.DBString)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 877,
        "Line": 38,
        "Column": 23
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `db.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\tdefer db.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 1027,
        "Line": 42,
        "Column": 17
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `file.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\tdefer file.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 1649,
        "Line": 57,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `db.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\tdefer db.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 2177,
        "Line": 82,
        "Column": 16
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func os.Open(name string) (*os.File, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", false, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 2497,
        "Line": 95,
        "Column": 22
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `file.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\tdefer file.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 2523,
        "Line": 97,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*encoding/csv.Reader).ReadAll() (records [][]string, err error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", false, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 2683,
        "Line": 102,
        "Column": 22
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func database/sql.Open(driverName string, dataSourceName string) (*database/sql.DB, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", false, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 3084,
        "Line": 117,
        "Column": 22
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "comparing with == will fail on wrapped errors. Use errors.Is to check for a specific error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\tif err == sql.ErrNoRows {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 3245,
        "Line": 124,
        "Column": 7
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*database/sql.Row).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", false, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 3384,
        "Line": 128,
        "Column": 22
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "gosec",
      "Text": "G302: Expect file permissions to be 0600 or less",
      "Severity": "error",
      "SourceLines": [
        "\t\tfile, err := os.OpenFile(s.filename, os.O_WRONLY, 0666)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 0,
        "Line": 149,
        "Column": 16
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func os.OpenFile(name string, flag int, perm io/fs.FileMode) (*os.File, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 3947,
        "Line": 152,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `file.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\tdefer file.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 3973,
        "Line": 154,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*encoding/csv.Writer).Write(record []string) error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 4231,
        "Line": 161,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func database/sql.Open(driverName string, dataSourceName string) (*database/sql.DB, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 4406,
        "Line": 168,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "lll",
      "Text": "line is 130 characters",
      "Severity": "error",
      "SourceLines": [
        "\t\trow := db.QueryRow(\"INSERT INTO urls VALUES ($1, $2) ON CONFLICT (full_url) DO NOTHING RETURNING short_url;\", shortURL, fullURL)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 0,
        "Line": 170,
        "Column": 0
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "comparing with == will fail on wrapped errors. Use errors.Is to check for a specific error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\tif err == sql.ErrNoRows {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 4658,
        "Line": 175,
        "Column": 7
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*database/sql.Row).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\t\t\treturn \"\", err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 4974,
        "Line": 183,
        "Column": 17
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*database/sql.Row).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn \"\", err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/app/storage/storage.go",
        "Offset": 5101,
        "Line": 188,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    }
  ],
  "Report": {
    "Linters": [
      {
        "Name": "asasalint",
        "Enabled": true
      },
      {
        "Name": "asciicheck",
        "Enabled": true
      },
      {
        "Name": "bidichk"
      },
      {
        "Name": "bodyclose",
        "Enabled": true
      },
      {
        "Name": "containedctx",
        "Enabled": true
      },
      {
        "Name": "contextcheck"
      },
      {
        "Name": "cyclop"
      },
      {
        "Name": "decorder"
      },
      {
        "Name": "deadcode"
      },
      {
        "Name": "depguard"
      },
      {
        "Name": "dogsled"
      },
      {
        "Name": "dupl",
        "Enabled": true
      },
      {
        "Name": "dupword",
        "Enabled": true
      },
      {
        "Name": "durationcheck",
        "Enabled": true
      },
      {
        "Name": "errcheck",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "errchkjson"
      },
      {
        "Name": "errname",
        "Enabled": true
      },
      {
        "Name": "errorlint",
        "Enabled": true
      },
      {
        "Name": "execinquery",
        "Enabled": true
      },
      {
        "Name": "exhaustive",
        "Enabled": true
      },
      {
        "Name": "exhaustivestruct"
      },
      {
        "Name": "exhaustruct"
      },
      {
        "Name": "exportloopref"
      },
      {
        "Name": "forbidigo"
      },
      {
        "Name": "forcetypeassert"
      },
      {
        "Name": "funlen"
      },
      {
        "Name": "gci"
      },
      {
        "Name": "ginkgolinter"
      },
      {
        "Name": "gocheckcompilerdirectives",
        "Enabled": true
      },
      {
        "Name": "gochecknoglobals"
      },
      {
        "Name": "gochecknoinits"
      },
      {
        "Name": "gochecksumtype"
      },
      {
        "Name": "gocognit"
      },
      {
        "Name": "goconst",
        "Enabled": true
      },
      {
        "Name": "gocritic",
        "Enabled": true
      },
      {
        "Name": "gocyclo"
      },
      {
        "Name": "godot",
        "Enabled": true
      },
      {
        "Name": "godox"
      },
      {
        "Name": "goerr113"
      },
      {
        "Name": "gofmt",
        "Enabled": true
      },
      {
        "Name": "gofumpt"
      },
      {
        "Name": "goheader"
      },
      {
        "Name": "goimports",
        "Enabled": true
      },
      {
        "Name": "golint"
      },
      {
        "Name": "gomnd",
        "Enabled": true
      },
      {
        "Name": "gomoddirectives"
      },
      {
        "Name": "gomodguard"
      },
      {
        "Name": "goprintffuncname",
        "Enabled": true
      },
      {
        "Name": "gosec",
        "Enabled": true
      },
      {
        "Name": "gosimple",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "gosmopolitan"
      },
      {
        "Name": "govet",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "grouper",
        "Enabled": true
      },
      {
        "Name": "ifshort"
      },
      {
        "Name": "importas"
      },
      {
        "Name": "inamedparam"
      },
      {
        "Name": "ineffassign",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "interfacebloat"
      },
      {
        "Name": "interfacer"
      },
      {
        "Name": "ireturn"
      },
      {
        "Name": "lll",
        "Enabled": true
      },
      {
        "Name": "loggercheck"
      },
      {
        "Name": "maintidx"
      },
      {
        "Name": "makezero",
        "Enabled": true
      },
      {
        "Name": "maligned"
      },
      {
        "Name": "mirror"
      },
      {
        "Name": "misspell"
      },
      {
        "Name": "musttag"
      },
      {
        "Name": "nakedret"
      },
      {
        "Name": "nestif"
      },
      {
        "Name": "nilerr",
        "Enabled": true
      },
      {
        "Name": "nilnil",
        "Enabled": true
      },
      {
        "Name": "nlreturn"
      },
      {
        "Name": "noctx"
      },
      {
        "Name": "nonamedreturns"
      },
      {
        "Name": "nosnakecase"
      },
      {
        "Name": "nosprintfhostport",
        "Enabled": true
      },
      {
        "Name": "paralleltest"
      },
      {
        "Name": "perfsprint"
      },
      {
        "Name": "prealloc",
        "Enabled": true
      },
      {
        "Name": "predeclared",
        "Enabled": true
      },
      {
        "Name": "promlinter"
      },
      {
        "Name": "protogetter"
      },
      {
        "Name": "reassign",
        "Enabled": true
      },
      {
        "Name": "revive",
        "Enabled": true
      },
      {
        "Name": "rowserrcheck",
        "Enabled": true
      },
      {
        "Name": "sloglint"
      },
      {
        "Name": "scopelint"
      },
      {
        "Name": "sqlclosecheck",
        "Enabled": true
      },
      {
        "Name": "staticcheck",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "structcheck"
      },
      {
        "Name": "stylecheck",
        "Enabled": true
      },
      {
        "Name": "tagalign"
      },
      {
        "Name": "tagliatelle"
      },
      {
        "Name": "tenv",
        "Enabled": true
      },
      {
        "Name": "testableexamples",
        "Enabled": true
      },
      {
        "Name": "testifylint"
      },
      {
        "Name": "testpackage"
      },
      {
        "Name": "thelper",
        "Enabled": true
      },
      {
        "Name": "tparallel",
        "Enabled": true
      },
      {
        "Name": "typecheck",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "unconvert",
        "Enabled": true
      },
      {
        "Name": "unparam",
        "Enabled": true
      },
      {
        "Name": "unused",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "usestdlibvars",
        "Enabled": true
      },
      {
        "Name": "varcheck"
      },
      {
        "Name": "varnamelen"
      },
      {
        "Name": "wastedassign",
        "Enabled": true
      },
      {
        "Name": "whitespace",
        "Enabled": true
      },
      {
        "Name": "wrapcheck",
        "Enabled": true
      },
      {
        "Name": "wsl"
      },
      {
        "Name": "zerologlint"
      },
      {
        "Name": "nolintlint",
        "Enabled": true
      }
    ]
  }
}
